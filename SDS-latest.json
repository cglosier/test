{
  "openapi" : "3.0.0",
  "servers" : [ {
    "description" : "StrongLink Cloud Demo",
    "url" : "https://cdev-slink3.strongboxdata.com/api/v1"
  } ],
  "info" : {
    "description" : "APIs for managing data using your StrongLink system",
    "version" : "1.0.2",
    "title" : "StrongLink Data Management RestAPI"
  },
  "tags" : [ {
    "name" : "version",
    "description" : "Version information for StringLink"
  }, {
    "name" : "auth",
    "description" : "Login and logout functions"
  }, {
    "name" : "users",
    "description" : "Configuring local users"
  }, {
    "name" : "acs",
    "description" : "Manipulating Access Control Specifiers (permissions)"
  }, {
    "name" : "roles",
    "description" : "Configuring roles and granting permissions to roles"
  }, {
    "name" : "domains",
    "description" : "Grouping of related users, roles, ACSes, and objects"
  }, {
    "name" : "exports",
    "description" : "Virtual file systems through which users access and manipulate files"
  }, {
    "name" : "stores",
    "description" : "Manipulating storage mediums within the system"
  }, {
    "name" : "pools",
    "description" : "Grouping of related stores and namespace bindings"
  }, {
    "name" : "namespaces",
    "description" : "Getting and manipulating namespaces"
  }, {
    "name" : "resources",
    "description" : "Getting, creating, and updating metadata resources"
  }, {
    "name" : "search",
    "description" : "Searching for items by resource"
  }, {
    "name" : "udi",
    "description" : "APIs for user data items (files)"
  }, {
    "name" : "udm schemas",
    "description" : "User defined metadata schemas"
  }, {
    "name" : "udm",
    "description" : "Operating with user-defined metadata by resource"
  }, {
    "name" : "policies",
    "description" : "Schedule and run policies"
  }, {
    "name" : "queries",
    "description" : "Creating and return queries"
  }, {
    "name" : "out-of-band",
    "description" : "APIs for retrieving information from out-of-band assets.  Out-of-band stores themselves are managed through the '/stores' endpoints"
  }, {
    "name" : "keys",
    "description" : "Manage the StrongLink Keystore"
  }, {
    "name" : "stats",
    "description" : "Get system health and performance information about your StrongLink node(s)"
  }, {
    "name" : "mr",
    "description" : "Metadata Reports - these reports provide insights about the data in your system"
  } ],
  "paths" : {
    "/version" : {
      "servers" : [ {
        "url" : "https://cdev-slink1.strongboxdata.com/api",
        "description" : "authentication endpoint for StrongLink; endpoint does not include API version (v1)"
      } ],
      "get" : {
        "tags" : [ "version" ],
        "summary" : "Version information for StrongLink.",
        "operationId" : "version",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/version"
                }
              }
            }
          }
        }
      }
    },
    "/auth" : {
      "servers" : [ {
        "url" : "https://cdev-slink1.strongboxdata.com/api",
        "description" : "Authentication endpoint for StrongLink."
      } ],
      "post" : {
        "tags" : [ "auth" ],
        "summary" : "login",
        "operationId" : "login",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "$ref" : "#/components/requestBodies/login"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden"
          }
        },
        "requestBody" : {
          "$ref" : "#/components/requestBodies/login"
        }
      }
    },
    "/users" : {
      "get" : {
        "tags" : [ "users" ],
        "summary" : "List all users in the current domain.",
        "operationId" : "getUsers",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "records" : {
                      "type" : "array",
                      "description" : "Each record represents an individual user.",
                      "items" : {
                        "type" : "object",
                        "$ref" : "#/components/schemas/fullUserRecord"
                      }
                    },
                    "count" : {
                      "type" : "integer",
                      "example" : 1
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "users" ],
        "summary" : "Create a new user; you can only create a new user in a local domain.",
        "operationId" : "postUser",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "users" : {
                    "type" : "array",
                    "items" : {
                      "type" : "object",
                      "$ref" : "#/components/schemas/partialUserRecord"
                    }
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      }
    },
    "/users/{ID}" : {
      "get" : {
        "tags" : [ "users" ],
        "summary" : "Get a user by ID.",
        "parameters" : [ {
          "name" : "ID",
          "in" : "path",
          "description" : "The ID of the user you want to retrieve.",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/fullUserRecord"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "users" ],
        "summary" : "Update a user; options are limited when updating users in an AD or LDAP. domain",
        "parameters" : [ {
          "name" : "ID",
          "in" : "path",
          "description" : "The ID of the user you want to modify.",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "$ref" : "#/components/schemas/partialUserRecord"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      },
      "delete" : {
        "tags" : [ "users" ],
        "summary" : "Delete a user; you cannot delete users in an AD or LDAP domain",
        "parameters" : [ {
          "name" : "ID",
          "in" : "path",
          "description" : "the ID of the user you want to delete",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      }
    },
    "/users/{userid}/roles" : {
      "get" : {
        "tags" : [ "users" ],
        "summary" : "Get a list of roles to which the given user has been assigned.",
        "parameters" : [ {
          "name" : "userid",
          "in" : "path",
          "description" : "The ID of the user for which you want to list roles.",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "roles" : {
                      "type" : "array",
                      "items" : {
                        "type" : "object",
                        "$ref" : "#/components/schemas/one_role"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "users" ],
        "summary" : "Remove a user from all roles.",
        "parameters" : [ {
          "name" : "userid",
          "in" : "path",
          "description" : "The ID of the user you want to remove from all roles.",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      }
    },
    "/users/{userid}/roles/{roleid}" : {
      "put" : {
        "tags" : [ "users" ],
        "summary" : "Update the given role for the given user.",
        "parameters" : [ {
          "name" : "userid",
          "in" : "path",
          "description" : "The ID of the user whose role you want to modify.",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "roleid",
          "in" : "path",
          "description" : "The ID of the users role you want to modify.",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "$ref" : "#/components/schemas/one_role"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      },
      "delete" : {
        "tags" : [ "users" ],
        "summary" : "Remove a user from the given role",
        "parameters" : [ {
          "name" : "userid",
          "in" : "path",
          "description" : "the ID of the user you want to remove from the given role",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "roleid",
          "in" : "path",
          "description" : "the role from which of the user is to be removed",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      }
    },
    "/special" : {
      "get" : {
        "tags" : [ "users" ],
        "summary" : "List all special users in the current domain",
        "operationId" : "getUsers",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "records" : {
                      "type" : "array",
                      "description" : "each record represents an individual special user",
                      "items" : {
                        "type" : "object",
                        "$ref" : "#/components/schemas/fullUserRecord"
                      }
                    },
                    "count" : {
                      "type" : "integer",
                      "example" : 1
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "users" ],
        "summary" : "Create a new special user; you can only create a new special user in a local domain.",
        "operationId" : "postUser",
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      }
    },
    "/specials/{ID}" : {
      "get" : {
        "tags" : [ "users" ],
        "summary" : "Get a special user by ID.",
        "parameters" : [ {
          "name" : "ID",
          "in" : "path",
          "description" : "The ID of the special user you want to retrieve.",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/fullUserRecord"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "users" ],
        "summary" : "Update a special user; options are limited when updating special users in an AD or LDAP domain.",
        "parameters" : [ {
          "name" : "ID",
          "in" : "path",
          "description" : "The ID of the special user you want to modify.",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/partialUserRecord"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "users" ],
        "summary" : "Delete a special user; you cannot delete users in an AD or LDAP domain.",
        "parameters" : [ {
          "name" : "ID",
          "in" : "path",
          "description" : "The ID of the special user you want to delete.",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      }
    },
    "/whoami" : {
      "get" : {
        "tags" : [ "users" ],
        "summary" : "return the ID of the current user",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "user" : {
                      "type" : "integer",
                      "example" : 45
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/acs" : {
      "get" : {
        "tags" : [ "acs" ],
        "summary" : "Get a list of available ACSes (permissions).",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/list_of_acses"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "acs" ],
        "summary" : "create an ACS",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "$ref" : "#/components/schemas/one_acs"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      }
    },
    "/acs/{acsId}" : {
      "get" : {
        "tags" : [ "acs" ],
        "summary" : "Get an ACS (permission) by ID.",
        "parameters" : [ {
          "name" : "acsId",
          "in" : "path",
          "description" : "the ID of the ACS you want to return",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/one_acs"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "acs" ],
        "summary" : "Update an ACS (permission) by ID.",
        "parameters" : [ {
          "name" : "acsId",
          "in" : "path",
          "description" : "The ID of the ACS you want to update.",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "$ref" : "#/components/schemas/one_acs"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      },
      "delete" : {
        "tags" : [ "acs" ],
        "summary" : "Delete an ACS (permission) by ID.",
        "parameters" : [ {
          "name" : "acsId",
          "in" : "path",
          "description" : "The ID of the ACS you want to return.",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      }
    },
    "/users/{userid}/acs" : {
      "get" : {
        "tags" : [ "acs" ],
        "summary" : "get all the ACSs for a given user",
        "parameters" : [ {
          "name" : "userid",
          "in" : "path",
          "description" : "the ID of the ACS you want to return",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/one_acs"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/acs/{acsId}" : {
      "put" : {
        "tags" : [ "acs" ],
        "summary" : "Attach the given ACS to the given user.",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "The ID of the user to which the ACS should be attached.",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "acsId",
          "in" : "path",
          "description" : "The ID of the ACS to attach to the user.",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      },
      "delete" : {
        "tags" : [ "acs" ],
        "summary" : "Delete the given ACS from the given user.",
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "The ID of the user from which the ACS should be detached.",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "acsId",
          "in" : "path",
          "description" : "The ID of the ACS to detach from the user.",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      }
    },
    "/roles" : {
      "get" : {
        "tags" : [ "roles" ],
        "summary" : "return information for all roles",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/list_of_roles"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "roles" ],
        "summary" : "create a new role",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "$ref" : "#/components/schemas/one_role"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      }
    },
    "/roles/{roleId}" : {
      "get" : {
        "tags" : [ "roles" ],
        "summary" : "return information for a specific role",
        "parameters" : [ {
          "name" : "roleId",
          "in" : "path",
          "description" : "the ID of the role that you want to see ACSes for",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      },
      "put" : {
        "tags" : [ "roles" ],
        "summary" : "update the specified role",
        "parameters" : [ {
          "name" : "roleId",
          "in" : "path",
          "description" : "the ID of the role that you want to see ACSes for",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      },
      "delete" : {
        "tags" : [ "roles" ],
        "summary" : "delete the specified role",
        "parameters" : [ {
          "name" : "roleId",
          "in" : "path",
          "description" : "the ID of the role that you want to see ACSes for",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      }
    },
    "/roles/{roleId}/acs" : {
      "get" : {
        "tags" : [ "roles" ],
        "summary" : "get all ACSes assigned to a role",
        "parameters" : [ {
          "name" : "roleId",
          "in" : "path",
          "description" : "the ID of the role that you want to see ACSes for",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      }
    },
    "/roles/{roleId}/acs/{acsId}" : {
      "put" : {
        "tags" : [ "roles" ],
        "summary" : "attach the specified ACS to the specified role",
        "parameters" : [ {
          "name" : "roleId",
          "in" : "path",
          "description" : "the ID of the role to which the ACS should attached",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "acsId",
          "in" : "path",
          "description" : "the ID of the ACS to be attach to the given role",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      },
      "delete" : {
        "tags" : [ "roles" ],
        "summary" : "delete the specified role",
        "parameters" : [ {
          "name" : "roleId",
          "in" : "path",
          "description" : "the ID of the role from which the ACS should be detached",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "acsId",
          "in" : "path",
          "description" : "the ID of the ACS to be detach from the given role",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      }
    },
    "/domains" : {
      "get" : {
        "tags" : [ "domains" ],
        "summary" : "return a list of all domains",
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      },
      "post" : {
        "tags" : [ "domains" ],
        "summary" : "create a new domains",
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      }
    },
    "/domains/{domainId}" : {
      "get" : {
        "tags" : [ "domains" ],
        "summary" : "return the given domain",
        "parameters" : [ {
          "name" : "domainId",
          "in" : "path",
          "description" : "the ID of the domain you wish to read",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      }
    },
    "/domains/{domainId}/users" : {
      "get" : {
        "tags" : [ "domains" ],
        "summary" : "list users within a domain",
        "parameters" : [ {
          "name" : "domainId",
          "in" : "path",
          "description" : "the ID of the domain you want to read",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      }
    },
    "/domains/{domainId}/roles" : {
      "get" : {
        "tags" : [ "domains" ],
        "summary" : "list roles within a domain",
        "parameters" : [ {
          "name" : "domainId",
          "in" : "path",
          "description" : "the ID of the domain you want to read",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      }
    },
    "/domains/{domainId}/acses" : {
      "get" : {
        "tags" : [ "domains" ],
        "summary" : "list ACSes (permissions) belonging to a domain",
        "parameters" : [ {
          "name" : "domainId",
          "in" : "path",
          "description" : "the ID of the domain you want to read",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      }
    },
    "/exports" : {
      "get" : {
        "tags" : [ "exports" ],
        "summary" : "get a list of virtual file systems exported from the system",
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      },
      "post" : {
        "tags" : [ "exports" ],
        "summary" : "create a virtual file systems (an \"export\")",
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      }
    },
    "/exports/{exportId}" : {
      "get" : {
        "tags" : [ "exports" ],
        "summary" : "get a virtual file systems (an \"export\") by ID",
        "parameters" : [ {
          "name" : "exportId",
          "in" : "path",
          "description" : "the ID of the export you want to return",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      }
    },
    "/stores" : {
      "get" : {
        "tags" : [ "stores" ],
        "summary" : "get a list of stores",
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      },
      "post" : {
        "tags" : [ "stores" ],
        "summary" : "create a new store",
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        },
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "$ref" : "#/components/schemas/postStore"
              }
            }
          }
        }
      }
    },
    "/stores/{storeId}" : {
      "get" : {
        "tags" : [ "stores" ],
        "summary" : "get a store by ID",
        "parameters" : [ {
          "name" : "storeId",
          "in" : "path",
          "description" : "the ID of the store you want to return",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      }
    },
    "/pools" : {
      "get" : {
        "tags" : [ "pools" ],
        "summary" : "get a list of Smart Pools",
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      },
      "post" : {
        "tags" : [ "pools" ],
        "summary" : "create a new smart pool",
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        },
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "$ref" : "#/components/schemas/postPool"
              }
            }
          }
        }
      }
    },
    "/pools/{poolId}" : {
      "get" : {
        "tags" : [ "pools" ],
        "summary" : "get a Smart Pool by ID",
        "parameters" : [ {
          "name" : "poolId",
          "in" : "path",
          "description" : "the ID of the Smart Pool you want to return information for",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      }
    },
    "/pools/{poolId}/stores" : {
      "get" : {
        "tags" : [ "pools" ],
        "summary" : "get a list of stores belonging to a Smart Pool",
        "parameters" : [ {
          "name" : "poolId",
          "in" : "path",
          "description" : "the ID of the Smart Pool you want to return information for",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      }
    },
    "/pools/{poolId}/stores/{storeId}" : {
      "put" : {
        "tags" : [ "pools" ],
        "summary" : "add a store to a pool",
        "parameters" : [ {
          "name" : "poolId",
          "in" : "path",
          "description" : "the ID of the Smart Pool to which you want to add a store",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "storeId",
          "in" : "path",
          "description" : "the ID of the store you want to add to the pool",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      },
      "delete" : {
        "tags" : [ "pools" ],
        "summary" : "remove a store from a pool",
        "parameters" : [ {
          "name" : "poolId",
          "in" : "path",
          "description" : "the ID of the Smart Pool you want to remove a store from",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "storeId",
          "in" : "path",
          "description" : "the ID of the store you want to remove from the Smart Pool",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      }
    },
    "/pools/{poolId}/namespaces" : {
      "get" : {
        "tags" : [ "pools" ],
        "summary" : "get a list of namespaces that are bound to a Smart Pool",
        "parameters" : [ {
          "name" : "poolId",
          "in" : "path",
          "description" : "the ID of the Smart Pool you want to return information for",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      }
    },
    "/pools/{poolId}/namespaces/{namespaceId}" : {
      "put" : {
        "tags" : [ "pools" ],
        "summary" : "bind a namespace to a Smart Pool",
        "parameters" : [ {
          "name" : "poolId",
          "in" : "path",
          "description" : "the ID of the Smart Pool you want to bind a namespace to",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "namespaceId",
          "in" : "path",
          "description" : "the ID of the namespace you want to bind to the pool",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      },
      "delete" : {
        "tags" : [ "pools" ],
        "summary" : "un-bind a namespace from a Smart Pool",
        "parameters" : [ {
          "name" : "poolId",
          "in" : "path",
          "description" : "the ID of the Smart Pool you want to un-bind a namespace from",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "namespaceId",
          "in" : "path",
          "description" : "the ID of the namespace you want to un-bind from the Smart Pool",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "No content"
          }
        }
      }
    },
    "/namespaces" : {
      "post" : {
        "tags" : [ "namespaces" ],
        "summary" : "create a new namespace",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "$ref" : "#/components/schemas/namespace"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      }
    },
    "/namespaces/{id}" : {
      "get" : {
        "tags" : [ "namespaces" ],
        "summary" : "retrieve a namespace by ID",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "the ID of the namespace you want to return",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      },
      "put" : {
        "tags" : [ "namespaces" ],
        "summary" : "update a single namespace by ID",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "the ID of the nanmespace to be updated",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      },
      "delete" : {
        "tags" : [ "namespaces" ],
        "summary" : "delete the single namespace given by ID",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "the ID of the namespace to be deleted",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      }
    },
    "/namespaces/{ID}/children" : {
      "get" : {
        "tags" : [ "namespaces" ],
        "summary" : "get the children of a namespace",
        "parameters" : [ {
          "name" : "ID",
          "in" : "path",
          "description" : "the ID of the parent namespace",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      }
    },
    "/resources" : {
      "get" : {
        "tags" : [ "resources" ],
        "summary" : "get all resources in a namespace path",
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      },
      "post" : {
        "tags" : [ "resources" ],
        "summary" : "create one or more new resources",
        "operationId" : "createResource",
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        },
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "$ref" : "#/components/schemas/resources"
              }
            }
          }
        }
      }
    },
    "/resources/{resourceID}" : {
      "get" : {
        "tags" : [ "resources" ],
        "summary" : "get a single resource by ID",
        "parameters" : [ {
          "name" : "resourceID",
          "in" : "path",
          "description" : "the id of the resource you want",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      },
      "put" : {
        "tags" : [ "resources" ],
        "summary" : "update a single resource by ID",
        "parameters" : [ {
          "name" : "resourceID",
          "in" : "path",
          "description" : "the ID of the resource to be updated",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      },
      "delete" : {
        "tags" : [ "resources" ],
        "summary" : "delete the single resource given by ID",
        "parameters" : [ {
          "name" : "resourceID",
          "in" : "path",
          "description" : "the ID of the resource to be deleted",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      }
    },
    "/resources/search" : {
      "post" : {
        "tags" : [ "search" ],
        "summary" : "creates a set of search results; returns an ID that you can call to retrieve results and status",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "records" : {
                      "type" : "array",
                      "items" : {
                        "type" : "object",
                        "properties" : {
                          "search_id" : {
                            "type" : "integer",
                            "example" : 42
                          }
                        }
                      }
                    },
                    "count" : {
                      "type" : "integer",
                      "example" : 1
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/search"
              }
            }
          }
        }
      }
    },
    "/resources/search/{searchId}" : {
      "get" : {
        "tags" : [ "search" ],
        "summary" : "returns a set of search results by ID. Search results expire at 24 hours.",
        "parameters" : [ {
          "name" : "searchId",
          "in" : "path",
          "description" : "the ID of the result set you want to return",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "include_udis",
          "in" : "query",
          "description" : "indicates that the search should include UDI records for applicable results",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "include_path",
          "in" : "query",
          "description" : "indicates that the search should include full paths for results",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "The number of results you want to ignore.  Results will begin at offset+1; this is used for paging search results, determining the first result on a page.",
          "required" : false,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The number of results you want to return. This is used for paging search results, determining the last result on a page.",
          "required" : false,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      }
    },
    "/resources/search/status/{searchId}" : {
      "get" : {
        "tags" : [ "search" ],
        "summary" : "returns the status of a search operation",
        "parameters" : [ {
          "name" : "searchId",
          "in" : "path",
          "description" : "the ID of the result set for which you need to see a status",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      }
    },
    "/udis" : {
      "post" : {
        "tags" : [ "udi" ],
        "summary" : "create new user data item(s)",
        "operationId" : "createUdis",
        "description" : "this endpoint allows for bulk creation of UDIs. Each object in the udis array represents a resource for which to create UDIs.",
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        },
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "udis" : {
                    "type" : "array",
                    "items" : {
                      "type" : "object",
                      "properties" : {
                        "resource_id" : {
                          "type" : "integer",
                          "description" : "the _id of the resource for which you want to create UDIs"
                        },
                        "store_object_ids" : {
                          "type" : "array",
                          "description" : "the _id of the store(s) in which you want to store the UDI",
                          "items" : {
                            "type" : "integer",
                            "example" : 1
                          }
                        },
                        "size" : {
                          "type" : "integer",
                          "description" : "the size of the UDI (file) in bytes"
                        },
                        "crc32" : {
                          "type" : "string",
                          "description" : "the CRC32 hash for the UDI"
                        },
                        "sha512" : {
                          "type" : "string",
                          "description" : "the sha512 hash for the UDI"
                        },
                        "state" : {
                          "type" : "string",
                          "description" : "determines the online/offline state of the file. Online files are available, offline files are not."
                        },
                        "store_data" : {
                          "type" : "object",
                          "description" : "ch entry in the store_object_ids array should be represented by an object within the store_data object.",
                          "properties" : {
                            "1" : {
                              "type" : "object",
                              "description" : "the store_data object contains the store _id and any additional data specific to the store, like the archive_url (if the archive option is on) or the s3_key if the store is s3-hosted and requires a key for authentication.",
                              "properties" : {
                                "store_id" : {
                                  "type" : "integer",
                                  "description" : "the _id of the store.",
                                  "example" : 1
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/udi_clone" : {
      "post" : {
        "tags" : [ "udi" ],
        "summary" : "copy user data items to new store",
        "operationId" : "createUdis",
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        },
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "udis" : {
                    "type" : "array",
                    "items" : {
                      "type" : "object",
                      "properties" : {
                        "resource_id" : {
                          "type" : "integer",
                          "description" : "the _id of the resource for which you want to create UDI copies"
                        },
                        "store_id" : {
                          "type" : "integer",
                          "description" : "the _id of the store on which you want to create UDI copies",
                          "example" : 3
                        },
                        "store_data" : {
                          "type" : "object",
                          "description" : "the store_data object contains the store _id and any additional data specific to the store, like the archive_url (if the archive option is on) or the s3_key if the store is s3-hosted and requires a key for authentication.",
                          "example" : {
                            "s3_key" : null
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/udis/{id}" : {
      "delete" : {
        "tags" : [ "udi" ],
        "summary" : "Delete a UDI",
        "operationId" : "deleteUdis",
        "description" : "This is a soft-delete operation. It marks a UDI as deleted in the database, but the UDI is still recoverable. You can only destroy UDIs by policy.",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "the ID of the UDI you want to delete.",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      }
    },
    "/udm_schemas" : {
      "get" : {
        "tags" : [ "udm schemas" ],
        "summary" : "get all user defined metadata schemas",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/udm_schema"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "udm schemas" ],
        "summary" : "create a new UDM schema",
        "operationId" : "createUDMSchema",
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        },
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "$ref" : "#/components/schemas/udm_schema"
              }
            }
          }
        }
      }
    },
    "/udm_schemas/{id}" : {
      "get" : {
        "tags" : [ "udm schemas" ],
        "summary" : "get a schema by ID",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "the ID of the UDM schema you want to return",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/getUdmSchema"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "udm schemas" ],
        "summary" : "update a schema by ID",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "the ID of the UDM schema you want to update",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      },
      "delete" : {
        "tags" : [ "udm schemas" ],
        "summary" : "delete a schema by ID",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "the ID of the UDM schema you want to return",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      }
    },
    "/udms" : {
      "post" : {
        "tags" : [ "udm" ],
        "summary" : "attach UDMs to one or more resources",
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        },
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "udms" : {
                    "type" : "array",
                    "items" : {
                      "type" : "object",
                      "properties" : {
                        "resource_id" : {
                          "type" : "integer",
                          "description" : "the _id of a resource you want to attach a UDM to"
                        },
                        "udms" : {
                          "type" : "array",
                          "items" : {
                            "type" : "object",
                            "properties" : {
                              "schema_id" : {
                                "type" : "integer",
                                "description" : "the _id of the schema you want to use for a UDM"
                              },
                              "fields" : {
                                "type" : "object",
                                "description" : "the key-value pairs from the schema that you want to provide for the UDM",
                                "example" : {
                                  "key" : "value"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/resources/{resourceID}/udms" : {
      "get" : {
        "tags" : [ "udm" ],
        "summary" : "get all UDMs attached to the given resource",
        "parameters" : [ {
          "name" : "resourceID",
          "in" : "path",
          "description" : "the ID of the resource for which you want to return UDMs",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/udm_example1"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "udm" ],
        "summary" : "Apply a UDM schema and values (supported by a schema) to a resource",
        "parameters" : [ {
          "name" : "resourceID",
          "in" : "path",
          "description" : "the ID of the resource for which you want to return UDMs",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        },
        "requestBody" : {
          "$ref" : "#/components/requestBodies/single_udm"
        }
      }
    },
    "/resources/{resourceID}/udms/{udmID}" : {
      "get" : {
        "tags" : [ "udm" ],
        "summary" : "get a schema by ID",
        "parameters" : [ {
          "name" : "resourceID",
          "in" : "path",
          "description" : "the ID of the resource for which you want to return UDMs",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "udmID",
          "in" : "path",
          "description" : "the ID of the resource for which you want to return UDMs",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      },
      "put" : {
        "tags" : [ "udm" ],
        "summary" : "Update user defined metadata for a particular resource",
        "parameters" : [ {
          "name" : "resourceID",
          "in" : "path",
          "description" : "the ID of the resource for which you want to return UDMs",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "udmID",
          "in" : "path",
          "description" : "the ID of the resource for which you want to return UDMs",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      },
      "delete" : {
        "tags" : [ "udm" ],
        "summary" : "Remove a schema from a resource",
        "parameters" : [ {
          "name" : "resourceID",
          "in" : "path",
          "description" : "the ID of the resource for which you want to return UDMs",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "udmID",
          "in" : "path",
          "description" : "the ID of the UDM schema you want to remove from the resource",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      }
    },
    "/policies/list" : {
      "get" : {
        "servers" : [ {
          "description" : "StatsAPI Endpoints",
          "url" : "https://cdev-slink3.strongboxdata.com/v1"
        } ],
        "tags" : [ "policies" ],
        "summary" : "get the list of available policy scripts.",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "status" : {
                      "type" : "integer",
                      "example" : 200
                    },
                    "data" : {
                      "type" : "array",
                      "items" : {
                        "type" : "object",
                        "$ref" : "#/components/schemas/one_policy"
                      },
                      "example" : [ {
                        "id" : "4fbcd483dfad3563345",
                        "name" : "Policy Name 1"
                      }, {
                        "id" : "5923abc3905fca04033",
                        "name" : "Policy Name 2"
                      } ]
                    }
                  }
                }
              }
            }
          },
          "503" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "status" : {
                      "type" : "integer",
                      "example" : 503
                    },
                    "error" : {
                      "type" : "string",
                      "example" : "Database connection refused"
                    },
                    "msg" : {
                      "type" : "string",
                      "example" : "Couldn't get Policy List"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/policies/{policyId}" : {
      "get" : {
        "servers" : [ {
          "description" : "StatsAPI Endpoints",
          "url" : "https://cdev-slink3.strongboxdata.com/v1"
        } ],
        "tags" : [ "policies" ],
        "summary" : "get a policy script.",
        "parameters" : [ {
          "name" : "policyId",
          "in" : "path",
          "description" : "the ID of the policy you want to return",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/one_policy"
                }
              }
            }
          },
          "503" : {
            "description" : "DB connection failed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "status" : {
                      "type" : "integer",
                      "example" : 503
                    },
                    "error" : {
                      "type" : "string",
                      "example" : "Database connection refused"
                    },
                    "msg" : {
                      "type" : "string",
                      "example" : "Couldn't get Policy"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "policies" ],
        "summary" : "Delete a policy",
        "parameters" : [ {
          "name" : "policyId",
          "in" : "path",
          "description" : "the ID of the policy you want to delete",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Success"
          },
          "404" : {
            "description" : "ID Not Found"
          },
          "412" : {
            "description" : "ID Related to Schedule Tasks",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/412-id-related"
                }
              }
            }
          },
          "503" : {
            "description" : "DB connection failed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "status" : {
                      "type" : "integer",
                      "example" : 503
                    },
                    "error" : {
                      "type" : "string",
                      "example" : "Database connection refused"
                    },
                    "msg" : {
                      "type" : "string",
                      "example" : "Couldn't delete Policy with id {id}"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/policy/schedule/list" : {
      "get" : {
        "servers" : [ {
          "description" : "StatsAPI Endpoints",
          "url" : "https://cdev-slink3.strongboxdata.com/v1"
        } ],
        "tags" : [ "policies" ],
        "summary" : "get a list of scheduled policies",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "status" : {
                      "type" : "integer",
                      "example" : 200
                    },
                    "data" : {
                      "type" : "array",
                      "items" : {
                        "type" : "object",
                        "$ref" : "#/components/schemas/one_schedule"
                      }
                    }
                  },
                  "example" : {
                    "status" : 200,
                    "data" : [ {
                      "name" : "schedule test 1",
                      "type" : "COPY",
                      "source" : "/",
                      "destination" : [ "BKUP-Pool" ],
                      "schedule" : {
                        "repeat" : 1,
                        "start" : 1511416800000,
                        "end" : 1511503200000,
                        "every" : "WEEK"
                      },
                      "policyId" : "afb298329828adc04033a"
                    }, {
                      "name" : "Ingest task",
                      "type" : "INGEST",
                      "source" : "/sds",
                      "destination" : "/c",
                      "schedule" : {
                        "repeat" : 1,
                        "start" : 1511416800000,
                        "end" : 1511416800000,
                        "every" : "WEEK"
                      },
                      "policyId" : "864abcd32045837394dfca"
                    } ]
                  }
                }
              }
            }
          },
          "503" : {
            "description" : "DB connection failed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "status" : {
                      "type" : "integer",
                      "example" : 503
                    },
                    "error" : {
                      "type" : "string",
                      "example" : "Database connection refused"
                    },
                    "msg" : {
                      "type" : "string",
                      "example" : "Couldn't get policy Schedule List"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/policy/schedule/save" : {
      "put" : {
        "servers" : [ {
          "description" : "StatsAPI Endpoints",
          "url" : "https://cdev-slink1.strongboxdata.com/v1"
        } ],
        "tags" : [ "policies" ],
        "summary" : "schedule a policy",
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "503" : {
            "description" : "Couldn't get policy schedule"
          }
        },
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/saveSchedule"
              }
            }
          }
        }
      }
    },
    "/policy/schedule/{policyId}" : {
      "get" : {
        "servers" : [ {
          "description" : "StatsAPI Endpoints",
          "url" : "https://cdev-slink3.strongboxdata.com/v1"
        } ],
        "tags" : [ "policies" ],
        "summary" : "get a scheduled policy",
        "parameters" : [ {
          "name" : "policyId",
          "in" : "path",
          "description" : "the ID of the policy you want to return",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/one_schedule"
                }
              }
            }
          },
          "403" : {
            "description" : "ID Not Found or Invalid Object ID"
          },
          "503" : {
            "description" : "DB connection failed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "status" : {
                      "type" : "integer",
                      "example" : 503
                    },
                    "error" : {
                      "type" : "string",
                      "example" : "Database connection refused"
                    },
                    "msg" : {
                      "type" : "string",
                      "example" : "Couldn't get Policy Schedule"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "policies" ],
        "summary" : "Delete a schedule",
        "parameters" : [ {
          "name" : "policyId",
          "in" : "path",
          "description" : "the ID of the schedule you want to delete",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Success"
          },
          "404" : {
            "description" : "ID Not Found"
          },
          "503" : {
            "description" : "DB connection failed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "status" : {
                      "type" : "integer",
                      "example" : 503
                    },
                    "error" : {
                      "type" : "string",
                      "example" : "Database connection refused"
                    },
                    "msg" : {
                      "type" : "string",
                      "example" : "Couldn't delete Policy Schedule"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/script/migration" : {
      "get" : {
        "servers" : [ {
          "description" : "StatsAPI Endpoints",
          "url" : "https://cdev-slink1.strongboxdata.com/v1"
        } ],
        "tags" : [ "policies" ],
        "summary" : "get the policy log",
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      }
    },
    "/qbuilder/list" : {
      "get" : {
        "servers" : [ {
          "description" : "StatsAPI Endpoints",
          "url" : "https://cdev-slink3.strongboxdata.com/v1"
        } ],
        "tags" : [ "queries" ],
        "summary" : "get a list of queries created within the system",
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "503" : {
            "description" : "DB connection failed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "status" : {
                      "type" : "integer",
                      "example" : 503
                    },
                    "error" : {
                      "type" : "string",
                      "example" : "Database connection refused"
                    },
                    "msg" : {
                      "type" : "string",
                      "example" : "Couldn't Query List"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/qbuilder/save" : {
      "put" : {
        "servers" : [ {
          "description" : "StatsAPI Endpoints",
          "url" : "https://cdev-slink3.strongboxdata.com/v1"
        } ],
        "tags" : [ "queries" ],
        "summary" : "create a query",
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      }
    },
    "/qbuilder/{queryId}" : {
      "get" : {
        "servers" : [ {
          "description" : "StatsAPI Endpoints",
          "url" : "https://cdev-slink3.strongboxdata.com/v1"
        } ],
        "tags" : [ "queries" ],
        "summary" : "get a list of queries created within the system",
        "parameters" : [ {
          "name" : "queryId",
          "in" : "path",
          "description" : "the ID of the query you want to return information about",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "503" : {
            "description" : "DB connection failed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "status" : {
                      "type" : "integer",
                      "example" : 503
                    },
                    "error" : {
                      "type" : "string",
                      "example" : "Database connection refused"
                    },
                    "msg" : {
                      "type" : "string",
                      "example" : "Couldn't delete Query with id {id}"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete" : {
        "servers" : [ {
          "description" : "StatsAPI Endpoints",
          "url" : "https://cdev-slink3.strongboxdata.com/v1"
        } ],
        "tags" : [ "queries" ],
        "summary" : "delete a query",
        "parameters" : [ {
          "name" : "queryId",
          "in" : "path",
          "description" : "the ID of the query you want to delete",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "No content"
          },
          "404" : {
            "description" : "ID not found or invalid"
          },
          "412" : {
            "description" : "Query is in use (as a part of a scheduled policy)"
          },
          "503" : {
            "description" : "Couldn't delete this policy (database connection refused)"
          }
        }
      }
    },
    "/oob/mounts" : {
      "get" : {
        "servers" : [ {
          "description" : "StatsAPI Endpoints",
          "url" : "https://cdev-slink3.strongboxdata.com/v1"
        } ],
        "tags" : [ "out-of-band" ],
        "summary" : "get a list of out-of-band stores (mounts)",
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      }
    },
    "/oob/mounts/{oobStore}" : {
      "get" : {
        "servers" : [ {
          "description" : "StatsAPI Endpoints",
          "url" : "https://cdev-slink3.strongboxdata.com/v1"
        } ],
        "tags" : [ "out-of-band" ],
        "summary" : "get a list of directories under a path belonging to an out-of-band store",
        "parameters" : [ {
          "name" : "oobStore",
          "in" : "path",
          "description" : "the ID of the out-of-band store that you want to browse",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "path",
          "in" : "query",
          "description" : "the path within the out-of-band store that you want to look inside",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      }
    },
    "/keys" : {
      "get" : {
        "servers" : [ {
          "description" : "StatsAPI Endpoints",
          "url" : "https://cdev-slink3.strongboxdata.com/v1"
        } ],
        "tags" : [ "keys" ],
        "summary" : "get a list keys in the keystore",
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      },
      "post" : {
        "servers" : [ {
          "description" : "StatsAPI Endpoints",
          "url" : "https://cdev-slink3.strongboxdata.com/v1"
        } ],
        "tags" : [ "keys" ],
        "summary" : "add a key",
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        },
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "id" : {
                    "type" : "string",
                    "description" : "the 'key ID' for the key you want to add.",
                    "example" : "AWS-3"
                  },
                  "description" : {
                    "type" : "string",
                    "description" : "a description for the key"
                  },
                  "secret" : {
                    "type" : "string",
                    "description" : "the secret ID for the key"
                  },
                  "type" : {
                    "type" : "string",
                    "enum" : [ "AWS", "S3", "Black Pearl" ],
                    "description" : "the service the key is used for"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/stats/star/{node_id}/netio" : {
      "get" : {
        "servers" : [ {
          "description" : "StatsAPI Endpoints",
          "url" : "https://cdev-slink3.strongboxdata.com/v1"
        } ],
        "tags" : [ "stats" ],
        "summary" : "Get the net imput/output for a StrongLink node",
        "parameters" : [ {
          "name" : "node_id",
          "in" : "path",
          "description" : "the _id of the individual node you want to return information from",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "days",
          "in" : "query",
          "description" : "the scope of the I/O information you want to return, in days, counting back from the present",
          "required" : false,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      }
    },
    "/stats/star/{node_id}/cpu" : {
      "get" : {
        "servers" : [ {
          "description" : "StatsAPI Endpoints",
          "url" : "https://cdev-slink3.strongboxdata.com/v1"
        } ],
        "tags" : [ "stats" ],
        "summary" : "Get the history of CPU consumption for a StrongLink node",
        "parameters" : [ {
          "name" : "node_id",
          "in" : "path",
          "description" : "the _id of the individual node you want to return information from",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "days",
          "in" : "query",
          "description" : "the scope of the CPU consumption history you want to return, in days, counting back from the present",
          "required" : false,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      }
    },
    "/stats/star/{node_id}/memory" : {
      "get" : {
        "servers" : [ {
          "description" : "StatsAPI Endpoints",
          "url" : "https://cdev-slink3.strongboxdata.com/v1"
        } ],
        "tags" : [ "stats" ],
        "summary" : "Get the net memory consumption history for a StrongLink node",
        "parameters" : [ {
          "name" : "node_id",
          "in" : "path",
          "description" : "the _id of the individual node you want to return information from",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "days",
          "in" : "query",
          "description" : "the scope of the memory consumption history you want to return, in days, counting back from the present",
          "required" : false,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      }
    },
    "/stats/star/{node_id}/volumes" : {
      "get" : {
        "servers" : [ {
          "description" : "StatsAPI Endpoints",
          "url" : "https://cdev-slink3.strongboxdata.com/v1"
        } ],
        "tags" : [ "stats" ],
        "summary" : "Get the consumption information for volumes local to your StrongLink node",
        "parameters" : [ {
          "name" : "node_id",
          "in" : "path",
          "description" : "the _id of the individual node you want to return information from",
          "required" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "lastOnly",
          "in" : "query",
          "description" : "Returns only the most recent volume consumption check. Volume consumption is checked every <x> minutes; setting lastOnly to false will return all previously held refreshes, which can help you track consumption over time.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      }
    },
    "/constellation" : {
      "get" : {
        "servers" : [ {
          "description" : "StatsAPI Endpoints",
          "url" : "https://cdev-slink3.strongboxdata.com/v1"
        } ],
        "tags" : [ "stats" ],
        "summary" : "Get basic information about your constellation including version, name, location, and overall health.",
        "parameters" : [ {
          "name" : "starsInformation",
          "in" : "query",
          "description" : "If set to true, this endpoint will also return information for all the nodes in the constellation as an array.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          }
        }
      }
    },
    "/stats/mr/1001" : {
      "get" : {
        "servers" : [ {
          "description" : "StatsAPI Endpoints",
          "url" : "https://cdev-slink3.strongboxdata.com/v1"
        } ],
        "tags" : [ "mr" ],
        "summary" : "Returns file count by MIME type",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/mr1001"
                }
              }
            }
          }
        }
      }
    },
    "/stats/mr/1002" : {
      "get" : {
        "servers" : [ {
          "description" : "StatsAPI Endpoints",
          "url" : "https://cdev-slink3.strongboxdata.com/v1"
        } ],
        "tags" : [ "mr" ],
        "summary" : "Returns file count by MIME type",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "$ref" : "#/components/schemas/mr1002"
                }
              }
            }
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "udm_example1" : {
        "example" : {
          "count" : 1,
          "records" : [ {
            "name" : "Document",
            "fields" : {
              "1" : "David Weber",
              "2" : "The Honor of the Queen",
              "3" : "PageMaker",
              "4" : "1.0.0",
              "5" : "English",
              "6" : "Tue, 10 Apr 2001 15:51:24 GMT"
            }
          }, {
            "name" : "Image",
            "fields" : {
              "1" : 640,
              "2" : 480,
              "3" : "Landscape",
              "4" : "jpeg",
              "5" : 32,
              "6" : "Format32bppPArgb",
              "7" : "jpg"
            }
          } ]
        }
      },
      "version" : {
        "properties" : {
          "count" : {
            "type" : "number"
          },
          "records" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "version" : {
                  "type" : "string",
                  "example" : "0.0.1"
                }
              }
            }
          }
        },
        "required" : [ "count", "records" ]
      },
      "login" : {
        "properties" : {
          "name" : {
            "type" : "string",
            "example" : "admin"
          },
          "password" : {
            "type" : "string",
            "format" : "password",
            "example" : "Password123"
          },
          "domain" : {
            "type" : "string",
            "example" : "LOCAL"
          }
        },
        "required" : [ "name", "password", "domain" ]
      },
      "fullUserRecord" : {
        "properties" : {
          "primaryGID" : {
            "type" : "integer",
            "description" : "the user's global ID (GID); this ID is unique across domains"
          },
          "creator_id" : {
            "type" : "integer",
            "description" : "the GID of the user who created the user/record"
          },
          "description" : {
            "type" : "string",
            "description" : "a brief description given to the user (where necessary)",
            "example" : "this is an example user"
          },
          "sshID" : {
            "type" : "integer",
            "nullable" : true
          },
          "_id" : {
            "type" : "integer"
          },
          "sshPubID" : {
            "type" : "integer",
            "nullable" : true
          },
          "modified" : {
            "type" : "boolean",
            "nullable" : true
          },
          "domain_id" : {
            "type" : "integer",
            "description" : "the domain to which the user belongs"
          },
          "sid" : {
            "type" : "integer",
            "nullable" : true
          },
          "name" : {
            "type" : "string",
            "description" : "the user name; this the name the user provides when logging in",
            "example" : "johndoe"
          },
          "email" : {
            "type" : "string",
            "format" : "email",
            "description" : "the user's email address; this is the address at which the user will receive notifications from the system",
            "example" : "johndoe@stronglink.com"
          },
          "gidData" : {
            "type" : "string",
            "format" : "email",
            "nullable" : true
          },
          "created" : {
            "type" : "object",
            "properties" : {
              "_dt" : {
                "type" : "string",
                "format" : "date-time",
                "example" : "2018-01-31T19:18:17.500000"
              }
            }
          },
          "uid" : {
            "type" : "integer"
          }
        }
      },
      "partialUserRecord" : {
        "properties" : {
          "description" : {
            "type" : "string",
            "description" : "a brief description given to the user (where necessary)",
            "example" : "this is an example user"
          },
          "sshID" : {
            "type" : "integer",
            "nullable" : true
          },
          "sshPubID" : {
            "type" : "integer",
            "nullable" : true
          },
          "name" : {
            "type" : "string",
            "description" : "the user name; this the name the user provides when logging in",
            "example" : "johndoe"
          },
          "email" : {
            "type" : "string",
            "format" : "email",
            "description" : "the user's email address; this is the address at which the user will receive notifications from the system",
            "example" : "johndoe@stronglink.com"
          }
        }
      },
      "one_acs" : {
        "properties" : {
          "name" : {
            "type" : "string",
            "example" : "Elmor Fudd"
          },
          "description" : {
            "type" : "string",
            "example" : "Admin ACS"
          },
          "domain_id" : {
            "type" : "integer",
            "example" : 11
          },
          "target_type" : {
            "type" : "string",
            "example" : "filesystem"
          },
          "acs" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "example" : "read"
            }
          },
          "target_id" : {
            "type" : "integer",
            "example" : 1
          }
        }
      },
      "list_of_acses" : {
        "type" : "object",
        "properties" : {
          "records" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/one_acs"
            }
          },
          "count" : {
            "type" : "integer",
            "example" : 1
          }
        }
      },
      "one_role" : {
        "properties" : {
          "name" : {
            "type" : "string",
            "example" : "Elmor Fudd"
          },
          "description" : {
            "type" : "string",
            "example" : "A new role"
          },
          "domain_id" : {
            "type" : "integer",
            "example" : 1
          }
        }
      },
      "list_of_roles" : {
        "properties" : {
          "records" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "$ref" : "#/components/schemas/one_role"
            }
          },
          "count" : {
            "type" : "integer",
            "example" : 1
          }
        }
      },
      "getNamespace" : {
        "properties" : {
          "selector" : {
            "type" : "object",
            "properties" : {
              "namespaces.path" : {
                "type" : "string",
                "format" : "path",
                "example" : "/"
              }
            }
          }
        }
      },
      "namespace" : {
        "properties" : {
          "namespaces" : {
            "type" : "object",
            "properties" : {
              "parent_id" : {
                "type" : "integer",
                "example" : "1"
              },
              "names" : {
                "type" : "array",
                "example" : [ "testNamespace" ]
              },
              "attributes" : {
                "type" : "object"
              }
            }
          }
        },
        "required" : [ "namespaces", "parent_id", "names" ]
      },
      "resources" : {
        "properties" : {
          "resources" : {
            "type" : "object",
            "properties" : {
              "parent_id" : {
                "type" : "integer",
                "description" : "the ID of the parent resource",
                "example" : 11
              },
              "names" : {
                "type" : "array",
                "description" : "the names of the UDIs or Resources to which you want to assign the resource",
                "example" : [ "resrouce1.txt", "resource2.txt" ]
              },
              "mimetypes" : {
                "type" : "array",
                "description" : "the mime types corresponding to names",
                "example" : [ "text/plain", "text/plain" ]
              },
              "attributes" : {
                "type" : "object",
                "properties" : {
                  "urls" : {
                    "type" : "array",
                    "description" : "the urls of items in the names field"
                  }
                }
              }
            }
          }
        }
      },
      "udm_schema" : {
        "type" : "object",
        "properties" : {
          "fields" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "name" : {
                  "type" : "string",
                  "description" : "the name operates like a key, incrementing from 1 for each field in the schema; use the \"descriptive name\" to determine how the field presents to the user",
                  "example" : "1"
                },
                "type" : {
                  "type" : "string",
                  "enum" : [ "boolean", "date", "decimal", "int", "string" ],
                  "description" : "the type of data that the field will take",
                  "example" : "string"
                },
                "descriptive_name" : {
                  "type" : "string",
                  "description" : "this is the field name that users will see",
                  "example" : "Workflow State"
                },
                "description" : {
                  "type" : "string",
                  "description" : "a description for the field, if necessary",
                  "example" : "workflow states indicate users who can access files"
                }
              }
            }
          },
          "indexes" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "name" : {
                  "type" : "string",
                  "description" : "the \"name\" of the field that you want to index.",
                  "example" : "1"
                },
                "indexDirection" : {
                  "type" : "string",
                  "enum" : [ "ascending", "descending", "hashed", "text" ],
                  "example" : "text",
                  "description" : "the method used to organize the index"
                }
              }
            }
          },
          "name" : {
            "type" : "string",
            "description" : "the name of the schema",
            "example" : "Workflow"
          },
          "description" : {
            "type" : "string",
            "description" : "a description for the schema",
            "example" : "a schema for workflow states"
          }
        }
      },
      "getUdmSchema" : {
        "type" : "object",
        "properties" : {
          "records" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "description" : {
                  "type" : "string",
                  "description" : "a description for a schema"
                },
                "schema" : {
                  "type" : "object",
                  "properties" : {
                    "1" : {
                      "type" : "object",
                      "description" : "fields are numbered starting with 1 - this is essentially a key",
                      "properties" : {
                        "descriptive_name" : {
                          "type" : "string",
                          "description" : "this is the field name that users will see",
                          "example" : "Workflow State"
                        },
                        "indexed" : {
                          "type" : "boolean",
                          "description" : "indicates whether or not a field is indexed",
                          "example" : true
                        },
                        "type" : {
                          "type" : "string",
                          "enum" : [ "boolean", "date", "decimal", "int", "string" ],
                          "description" : "the type of data contained within this field",
                          "example" : "string"
                        },
                        "description" : {
                          "type" : "string",
                          "description" : "a description for the field, if necessary",
                          "example" : "workflow states indicate users who can access files"
                        },
                        "must_exist" : {
                          "type" : "boolean",
                          "description" : "indicates whether or not a field is required",
                          "example" : false
                        }
                      }
                    }
                  }
                },
                "modified" : {
                  "type" : "object",
                  "description" : "provides the modified date for a schema; this field is null if the schema has never been modified",
                  "nullable" : true,
                  "properties" : {
                    "_dt" : {
                      "type" : "string",
                      "format" : "date-time"
                    }
                  },
                  "example" : null
                },
                "name" : {
                  "type" : "string",
                  "description" : "the name of the schema",
                  "example" : "Workflow"
                },
                "created" : {
                  "type" : "object",
                  "description" : "provides the modified date for a schema; this field is null if the schema has never been modified",
                  "nullable" : false,
                  "properties" : {
                    "_dt" : {
                      "type" : "string",
                      "format" : "date-time",
                      "example" : "2018-03-01T18:03:46.245000"
                    }
                  }
                },
                "ownerID" : {
                  "type" : "integer",
                  "description" : "the ID of the owner of the schema",
                  "example" : 1
                },
                "_id" : {
                  "type" : "integer",
                  "description" : "the ID of the schema",
                  "example" : 49
                },
                "validator" : {
                  "type" : "object",
                  "description" : "validating qualities of the schema"
                },
                "indexes" : {
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "name" : {
                        "type" : "string",
                        "description" : "the name of the index",
                        "example" : "1_text"
                      },
                      "keys" : {
                        "type" : "array",
                        "description" : "indicates the field name (number) and index type (text, ascending, descending, etc)",
                        "items" : {
                          "type" : "array",
                          "items" : {
                            "type" : "string",
                            "example" : "1, text"
                          }
                        }
                      }
                    }
                  }
                },
                "accessed" : {
                  "type" : "object",
                  "properties" : {
                    "_dt" : {
                      "type" : "string",
                      "format" : "date-time"
                    }
                  },
                  "nullable" : true,
                  "description" : "indicates the last date/time that a user applied the schema"
                },
                "creatorID" : {
                  "type" : "integer",
                  "description" : "the ID of the user who created the schema",
                  "example" : 1
                },
                "defaults" : {
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "example" : "1: example",
                    "description" : "indicates default values for fields in a key-value pairs"
                  }
                }
              }
            }
          },
          "count" : {
            "type" : "integer",
            "description" : "indicates the number of records returned",
            "example" : 1
          }
        }
      },
      "search" : {
        "properties" : {
          "query" : {
            "type" : "object",
            "description" : "Queries take mongo operators. Query arguments using requiring a comparison operator are nested objects. Ignore quotes in the following examples. i.e. {schemaName.fieldName':' {$comparison':' value}}. Evaluate multiple objects against a logical operator in an array i.e. {$and [{schemaName.fieldName':' {$comparison':' value}}, {schemaName.fieldName':' {$comparison':' value}}]}.",
            "example" : {
              "document.1" : "test"
            }
          },
          "record_limit" : {
            "type" : "integer",
            "description" : "the maximum number of records you want the search to return.",
            "example" : 50
          },
          "time_limit" : {
            "type" : "integer",
            "format" : "time",
            "description" : "the maximum time for which the search can run (in seconds).",
            "example" : 60
          }
        }
      },
      "postStore" : {
        "properties" : {
          "stores" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "name" : {
                  "type" : "string",
                  "description" : "the name of the store you want to add",
                  "example" : "storeName"
                },
                "description" : {
                  "type" : "string",
                  "description" : "a plain-text description for the store",
                  "example" : "my first store"
                },
                "inBand" : {
                  "type" : "boolean",
                  "example" : true,
                  "description" : "indicates whether a store is in-band or out-of-band. in-band stores can be added to pools and used as policy targets (as pools); out-of-band stores are read-only through StrongLink, and are accessible outside the system."
                },
                "url" : {
                  "type" : "string",
                  "format" : "url",
                  "example" : "192.168.1.1:/store/path",
                  "description" : "the address of the store that you want to add to the system"
                },
                "attributes" : {
                  "type" : "object",
                  "properties" : {
                    "mounted" : {
                      "type" : "boolean",
                      "description" : "typically true unless the store is local (and therefore already mounted to the server)"
                    },
                    "mountType" : {
                      "type" : "string",
                      "enum" : [ "NFS", "CIFS", "S3", "Local" ],
                      "example" : "NFS",
                      "description" : "the type of filesystem you want to add to StrongLink"
                    },
                    "mountPoint" : {
                      "type" : "string",
                      "format" : "path",
                      "example" : "/radium/mounts",
                      "description" : "/radium/mounts is the default mount point for StrongLink"
                    },
                    "mountOptions" : {
                      "type" : "string",
                      "description" : "fstab comma separated mount options",
                      "example" : "defaults"
                    }
                  },
                  "required" : [ "mounted", "mountType", "mountPoint", "mountOptions" ]
                }
              }
            }
          }
        }
      },
      "postPool" : {
        "properties" : {
          "pools" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : {
                "name" : {
                  "type" : "string",
                  "description" : "the name of the pool you want to create",
                  "example" : "myPool"
                },
                "description" : {
                  "type" : "string",
                  "description" : "a description of the pool",
                  "example" : "my new pool"
                },
                "distributionPolicy" : {
                  "type" : "string",
                  "description" : "the method for distributing write requests across the store. StrongLink currently only supports ROUND-ROBIN.",
                  "example" : "ROUND-ROBIN",
                  "enum" : [ "ROUND-ROBIN" ]
                },
                "online" : {
                  "type" : "boolean",
                  "description" : "determines whether the pool is online or not",
                  "example" : true
                }
              },
              "required" : [ "name", "distributionPolicy" ]
            }
          }
        }
      },
      "one_policy" : {
        "properties" : {
          "id" : {
            "type" : "string",
            "example" : "53849dba4o9309a928393"
          },
          "name" : {
            "type" : "string",
            "example" : "charPolicy Name 1"
          }
        }
      },
      "one_schedule" : {
        "properties" : {
          "name" : {
            "type" : "string",
            "example" : "gest task"
          },
          "type" : {
            "type" : "string",
            "example" : "INGEST"
          },
          "source" : {
            "type" : "string",
            "example" : "/sds"
          },
          "destination" : {
            "type" : "string",
            "example" : "/c"
          },
          "schedule" : {
            "type" : "object",
            "properties" : {
              "repeat" : {
                "type" : "integer",
                "example" : 1
              },
              "start" : {
                "type" : "string",
                "format" : "date-time",
                "example" : 1511416800000
              },
              "end" : {
                "type" : "string",
                "format" : "date-time",
                "example" : 1511416800000
              },
              "every" : {
                "type" : "string",
                "example" : "WEEK"
              }
            }
          },
          "policyId" : {
            "type" : "string",
            "example" : "864abcd32045837394dfca"
          }
        }
      },
      "saveSchedule" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "the name of the schedule",
            "example" : "new schedule name"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "INGEST", "HARVEST", "COPY", "PURGE", "OUTGEST" ],
            "description" : "the policy type that you want to schedule",
            "example" : "HARVEST"
          },
          "storeId" : {
            "type" : "integer",
            "description" : "the store containing the source for the policy. This store may be in-band or an out-of-band (oob mount) store.",
            "example" : 2
          },
          "source" : {
            "type" : "string",
            "description" : "the namespace source for the policy",
            "example" : "/test"
          },
          "schedule" : {
            "type" : "object",
            "properties" : {
              "start" : {
                "type" : "string",
                "description" : "the start date and time for the policy in (what format?)",
                "example" : null
              },
              "every" : {
                "type" : "string",
                "description" : "the interval on which the schedule repeats, relative to the start property.",
                "example" : null
              }
            }
          },
          "policyId" : {
            "type" : "string",
            "description" : "the ID of the scheduled policy operation"
          },
          "dest_pools" : {
            "type" : "array",
            "description" : "the _id of the Smart Pool destination target(s) of the policy",
            "items" : {
              "type" : "integer",
              "example" : "1, 2, 3"
            }
          }
        }
      },
      "mr1001" : {
        "type" : "object",
        "properties" : {
          "status" : {
            "type" : "integer",
            "description" : "http status code",
            "example" : 200
          },
          "data" : {
            "type" : "object",
            "properties" : {
              "results" : {
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "total_count" : {
                      "type" : "integer",
                      "description" : "the number of items represented by the key",
                      "example" : 13
                    },
                    "key" : {
                      "type" : "string",
                      "description" : "the key delimiter for the result For mr/1001, the key is the MIME type",
                      "example" : "image/jpeg"
                    },
                    "total_size" : {
                      "type" : "integer",
                      "description" : "the total space consumed by the total_count sharing the key in bytes",
                      "example" : 1024
                    }
                  }
                }
              },
              "totals" : {
                "type" : "object",
                "description" : "the totals for the complete result set",
                "properties" : {
                  "count" : {
                    "type" : "integer",
                    "description" : "the sum of the total_count fields under results",
                    "example" : 13
                  },
                  "size" : {
                    "type" : "integer",
                    "description" : "the sum of the total_size fields under results"
                  }
                }
              },
              "timestamp" : {
                "type" : "integer",
                "description" : "indicates the time when results are returned"
              }
            }
          }
        }
      },
      "mr1002" : {
        "type" : "object",
        "properties" : {
          "status" : {
            "type" : "integer",
            "description" : "http status code",
            "example" : 200
          },
          "data" : {
            "type" : "object",
            "properties" : {
              "results" : {
                "type" : "array",
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "total_count" : {
                      "type" : "integer",
                      "description" : "the number of items represented by the key",
                      "example" : 13
                    },
                    "key" : {
                      "type" : "string",
                      "description" : "the key delimiter for the result For mr/1002, the key is age",
                      "example" : "7 days"
                    },
                    "total_size" : {
                      "type" : "integer",
                      "description" : "the total space consumed by the total_count sharing the key in bytes",
                      "example" : 1024
                    }
                  }
                }
              },
              "totals" : {
                "type" : "object",
                "description" : "the totals for the complete result set",
                "properties" : {
                  "count" : {
                    "type" : "integer",
                    "description" : "the sum of the total_count fields under results",
                    "example" : 13
                  },
                  "size" : {
                    "type" : "integer",
                    "description" : "the sum of the total_size fields under results"
                  }
                }
              },
              "timestamp" : {
                "type" : "integer",
                "description" : "indicates the time when results are returned"
              }
            }
          }
        }
      },
      "412-id-related" : {
        "properties" : {
          "status" : {
            "type" : "integer",
            "example" : 412
          },
          "error" : {
            "type" : "string",
            "example" : "Policy In Use"
          },
          "msg" : {
            "type" : "string",
            "example" : "Couldn't delete Policy wit"
          }
        }
      },
      "503-dbfail-delete-policy" : {
        "properties" : {
          "status" : {
            "type" : "integer",
            "example" : 503
          },
          "error" : {
            "type" : "string",
            "example" : "Database connection refused"
          },
          "msg" : {
            "type" : "string",
            "example" : "Couldn't get Policy"
          }
        }
      },
      "503-dbfail-save-policy" : {
        "properties" : {
          "status" : {
            "type" : "integer",
            "example" : 503
          },
          "error" : {
            "type" : "string",
            "example" : "Database connection refused"
          },
          "msg" : {
            "type" : "string",
            "example" : "Couldn't get Policy"
          }
        }
      },
      "503-dbfail-get-query" : {
        "properties" : {
          "status" : {
            "type" : "integer",
            "example" : 503
          },
          "error" : {
            "type" : "string",
            "example" : "Database connection refused"
          },
          "msg" : {
            "type" : "string",
            "example" : "Couldn't get Policy"
          }
        }
      },
      "503-dbfail-delete-query" : {
        "properties" : {
          "status" : {
            "type" : "integer",
            "example" : 503
          },
          "error" : {
            "type" : "string",
            "example" : "Database connection refused"
          },
          "msg" : {
            "type" : "string",
            "example" : "Couldn't get Policy"
          }
        }
      },
      "503-dbfail-no-save-query" : {
        "properties" : {
          "status" : {
            "type" : "integer",
            "example" : 503
          },
          "error" : {
            "type" : "string",
            "example" : "Database connection refused"
          },
          "msg" : {
            "type" : "string",
            "example" : "Couldn't get Policy"
          }
        }
      }
    },
    "requestBodies" : {
      "login" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/login"
            }
          }
        },
        "required" : true
      },
      "resources" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/resources"
            }
          }
        }
      },
      "single_udm" : {
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/udm_schema"
            }
          }
        }
      }
    },
    "securitySchemes" : {
      "sessionKey" : {
        "type" : "apiKey",
        "in" : "header",
        "name" : "X-SDS-SessionKey"
      }
    }
  },
  "security" : [ {
    "sessionKey" : [ ]
  } ]
}